class Customer {
    private int accountNo;
    private String accName;
    private double balance;

    public Customer(int accountNo, String accName, double balance) {
        this.accountNo = accountNo;
        this.accName = accName;
        this.balance = balance;
    }

    public synchronized void deposit(double amount) {
        System.out.println(accName + " is depositing $" + amount);
        balance += amount;
        System.out.println("New balance after deposit: $" + balance);
        notify();
    }

    public synchronized void withdraw(double amount) {
        System.out.println(accName + " is trying to withdraw $" + amount);

        while (amount > balance) {
            System.out.println("Insufficient balance. " + accName + " is waiting for deposit.");
            try {
                wait(); 
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println(accName + " is withdrawing $" + amount);
        balance -= amount;
        System.out.println("New balance after withdrawal: $" + balance);
    }
}

public class BankDemo {
    public static void main(String[] args) {
        Customer customer1 = new Customer(101, "Alice", 1000);
        Customer customer2 = new Customer(102, "Bob", 1500);

       
        Thread thread1 = new Thread(() -> {
            customer1.withdraw(1200);
        });

        
        Thread thread2 = new Thread(() -> {
            customer2.deposit(700);
        });

        thread1.start();
        thread2.start(); 

        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
